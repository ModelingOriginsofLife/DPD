# control file for dpd3
# ---------------------
#  # = comment line
#  you can create this file with:
#     dpd3 -tfilename
#  or if you already have a control file just type in:
#     dpd3 oldfile [other options] -tnewfile
#  so your old file is up to date with all new features
#  (but your comments are lost, and this may not work)
#  or push 'v' while running dpd3 to create a template from actual parameters
#
sigma = 3.000                 # factor for dissipative and random force
randfac = 1.73205             # factor for random force
rho = 10.000                  # particle density
dt = 0.0100                   # integration interval
#
displayintv = 1               # display interval
seed = 1145460982             # random seed (chosen at random if not specified)
#
size = 10                     # width (and height and possibly depth) of simulated system
dim = 2                       # dimension [2|3] of system
depth = 1                     # (if != 1 and 3-d) depth of non-cubic "thin" system
#
slice_disp = 0.000  1.000   0 # sliced display for 3d viewing: min delta active [0|1]
#
max_step = 200                # simulation steps
stat_intv = 250               # interval for displaying statistics
save_intv = 0                 # interval for saving position & bond data (*.out)
poly_intv = 0                 # interval for census (.pout) file
reax_intv = 0                 # interval for reaction (.reax) file
#
snapshotfn = dpd_%06d.bmp       # filename for picture-snapshots (e.g. film/dpd_%06d.bmp)
snaps_intv = 0 0 0  #  interval for automatic snapshots if >0, start,end
#
# beta[i,j] = conservative interaction between different particle types 
#
#               /   1          beta    \
#  Fc = alpha * | --------- - -------- |
#               \ rij^exp12   rij^exp6 /
#
# if exp12==0 and exp6==-1 or program was compiled with SIMPLE_CONS set in Makefile then
#  Fc = alpha * (1 - beta * rij) = -alpha * beta * rij + alpha
#
#    i j   alpha   beta    exp12 exp6
beta 1 1 =   3.000   1.000 0     -1    # Water -- Water
beta 1 2 =  10.000   1.000 0     -1    # Water -- Oil  
beta 1 3 =   3.000   1.000 0     -1    # Water -- Poly2
beta 1 4 =  10.000   1.000 0     -1    # Water -- Poly3
beta 1 5 =  10.000   1.000 0     -1    # Water -- (null)
beta 1 6 =  10.000   1.000 0     -1    # Water -- (null)
beta 1 7 =  10.000   1.000 0     -1    # Water -- (null)
beta 2 2 =   3.000   1.000 0     -1    # Oil   -- Oil  
beta 2 3 =  10.000   1.000 0     -1    # Oil   -- Poly2
beta 2 4 =  10.000   1.000 0     -1    # Oil   -- Poly3
beta 2 5 =  10.000   1.000 0     -1    # Oil   -- (null)
beta 2 6 =  10.000   1.000 0     -1    # Oil   -- (null)
beta 2 7 =  10.000   1.000 0     -1    # Oil   -- (null)
beta 3 3 =   3.000   1.000 0     -1    # Poly2 -- Poly2
beta 3 4 =  10.000   1.000 0     -1    # Poly2 -- Poly3
beta 3 5 =  10.000   1.000 0     -1    # Poly2 -- (null)
beta 3 6 =  10.000   1.000 0     -1    # Poly2 -- (null)
beta 3 7 =  10.000   1.000 0     -1    # Poly2 -- (null)
beta 4 4 =   3.000   1.000 0     -1    # Poly3 -- Poly3
beta 4 5 =  10.000   1.000 0     -1    # Poly3 -- (null)
beta 4 6 =  10.000   1.000 0     -1    # Poly3 -- (null)
beta 4 7 =  10.000   1.000 0     -1    # Poly3 -- (null)
beta 5 5 =   3.000   1.000 0     -1    # (null) -- (null)
beta 5 6 =  10.000   1.000 0     -1    # (null) -- (null)
beta 5 7 =  10.000   1.000 0     -1    # (null) -- (null)
beta 6 6 =   3.000   1.000 0     -1    # (null) -- (null)
beta 6 7 =  10.000   1.000 0     -1    # (null) -- (null)
beta 7 7 =   3.000   1.000 0     -1    # (null) -- (null)
beta_min = 0.000                       # minimal rij for Fc calculation
beta_min_force = 0.100                 # Fc if rij<beta_min
#
# num_particle[i] = ratio of free particles of type i
num_particle 0 =  0.00  # Poly 
num_particle 1 = 60.00  # Water
num_particle 2 =  0.00  # Oil  
num_particle 3 =  0.00  # Poly2
num_particle 4 =  0.00  # Poly3
num_particle 5 =  0.00  # (null)
num_particle 6 =  0.00  # (null)
num_particle 7 =  0.00  # (null)
#
# num_chains[i] = ratio of polymers of type i
#   maximun polymer length 8
#   maximun number of different polymers 8
num_chain 0 = 20.00    2  3
num_chain 1 = 0.00     2  2  3
num_chain 2 = 0.00     2  2  4
num_chain 3 = 0.00     3  2  3
num_chain 4 = 0.00     2  3  2
num_chain 5 = 0.00     2  3  2  3
num_chain 6 = 0.00     2  3  3  2
num_chain 7 = 0.00     3  2  2  3  1  2  1
#
# Bond parameters
bond = 10.000                   # bonding force between chained monomers
spring_dist = 0.010             # bond minimal energy length
bond_angle_strength = 0.000     # stiff bond force
dyn_loops = 0                   # whether loop polymers can form or not [1|0]
# much of the code cannot currently handle looping polymers, so this should be left off
max_dynamic_polymer_length = 8  # polymers will stop bonding at this length
#
# Dynamic bond parameters:
# default is no dynamic bonding
# values <= 0 mean bonds won't form/break
#        i j   form  break probabilities
#
# Simple chemistry:
# For every timestep that a type-a is near a type-b particle, there is an X chance that
# a will change to type c and b to type d.  Any or all of a-d may be the same, but all
# reactions must have two reactants and two products.  See dyn_bond above for a-b <-> a + b
# type reactions.
#           a + b -> c + d	X
#
# impenetrable brick
# from x0, y0 (low, left) to x1,y1 (up, right) and active-flag, at init
brick = -1.000 -2.000 1.000  2.000   0 0
#
# between xmin, xmax with velocity, diffy and active-flag
pressx = -10.100 -10.000 1.000  0.000   0
#
# color[i] = RGB-color of particle of type i
color 0 = 240  240  240   # Poly 
color 1 = 0    0    250   # Water
color 2 = 250  0    0     # Oil  
color 3 = 0    250  0     # Poly2
color 4 = 0    250  250   # Poly3
color 5 = 0    0    0     # (null)
color 6 = 0    0    0     # (null)
color 7 = 0    0    0     # (null)
#
# epsilon[i] = strength of e-field on particle of type i
epsilon 0 = 0.000         # Poly 
epsilon 1 = 0.000         # Water
epsilon 2 = 1.000         # Oil  
epsilon 3 = 1.000         # Poly2
epsilon 4 = 0.000         # Poly3
epsilon 5 = 0.000         # (null)
epsilon 6 = 0.000         # (null)
epsilon 7 = 0.000         # (null)
#
geometry = 0                  # one of the predefined geometries
                              #    0        normal (all)
                              #    1        a rectangular hole from -z to z
                              #    2        a H-structure
                              #    3        bell-shape
#
# There are a number of advanced options for controlling the shape of the space
# including electrodes, blocks, etc.
# Interested parties are advised to examine other .dat files which include these
# and the source code itself, beginning with dpd_file.c and dpd_vars.*
#
